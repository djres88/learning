A much better explanation of closure: http://blog.jhades.org/really-understanding-javascript-closures/
define a function that increments a counter in a loop: */

function closureExample() {
    var i = 0;
    for (i = 0; i< 3 ;i++) {
        setTimeout(function() {
            console.log('counter value is ' + i);
        }, 1000);
    }
}
// call the example function
closureExample();

/* The variable i exists OUTSIDE the anonymous logging function. So when this function gets passed through the setTimeout method, how can the function possibly have access to variable i? (NOTE ? FOR MATT: Isn't the variable global within the context of the anonymous function, given that the anonymous function is nested within closureExample?)

ANSWER: When the anonymous logging function is passed to the setTimeout method, the Javascript engine detects that for the function to be executed in the future, a reference will be needed to variable i. To solve this, the engine keeps a link to this variable for later use, and stores that link in a special function scoped execution context.

Such a function with 'memory' about the environment where it was created is simply known as: a CLOSURE. This is because the function inspects its environment and closes over the variables that it needs to remember for future use.
